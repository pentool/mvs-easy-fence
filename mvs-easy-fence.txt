// xs_begin
// arg : { name = 'Post Size' value = '5'  range = '1 255'  step = '1'  decimal = '0' }
// arg : { name = 'Post Spacing' value = '1'  range = '1 255'  step = '1'  decimal = '0' }
// arg : { name = 'Post Offset' value = '0'  range = '-255 255'  step = '1'  decimal = '0' }
// arg : { name = 'Cap Height' value = '1'  range = '1 255'  step = '1'  decimal = '0' }
// arg : { name = 'Cap Inset' value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Picket Count' value = '4'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Picket Size' value = '2'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Picket Height Limit' value = '3'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Picket Offset' value = '0'  range = '-255 255'  step = '1'  decimal = '0' }
// arg : { name = 'Picket Inset' value = '2'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Rail Count' value = '2'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Rail Size' value = '2'  range = '1 255'  step = '1'  decimal = '0' }
// arg : { name = 'Rail Spacing' value = '5'  range = '1 255'  step = '1'  decimal = '0' }
// arg : { name = 'Rail Offset' value = '0'  range = '-255 255'  step = '1'  decimal = '0' }
// arg : { name = 'Rail Inset' value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Rail Color' value = '88'  range = '1 255'  step = '1'  decimal = '0' }
// xs_end


// Post parameters.
float _postSize = i_args[0];
float _postSpacing = i_args[1];
float _postOffset = i_args[2];

// Post cap parameters.
float _capHeight = i_args[3] - 1.0;
float _capInset = i_args[4];

// Picket parameters.
float _picketCount = i_args[5];
float _picketSize = i_args[6];
float _picketHeightLimit = i_args[7];
float _picketOffset = i_args[8];
float _picketInset = i_args[9];

// Rail parameters.
float _railCount = i_args[10];
float _railSize = i_args[11];
float _railSpacing = i_args[12];
float _railOffset = i_args[13];
float _railInset = i_args[14];
float _railColor = i_args[15];


ivec3 getOrientation() {
	if (i_volume_size.x >= i_volume_size.y) {
		return ivec3(0, 2, 1);
	}
	else if (i_volume_size.x < i_volume_size.y) {
		return ivec3(1, 2, 0);
	}
}

float createFence(vec3 v) {
	float gridSize = 0.0;
	float postRatio = 0.0;

	ivec3 orientation = getOrientation();

	int a1 = orientation[0];
	int a2 = orientation[2];
	int a3 = orientation[1];

	// If there are pickets, use them to determine distance between posts.
	if (_picketCount > 0.0) {
		gridSize = _postSize + _picketCount * _picketSize + (_picketCount + 1.0) * _postSpacing;
	}
	// If there are no pickets, use the post spacing values to determine spacing between posts.
	else {
		gridSize = _postSize + _postSpacing;
	}

	postRatio = mod(v[a1] - _postOffset, gridSize);

	// ===============================================
	// ===== CALCULATIONS FOR POSTS ==================
	// ===============================================

	// Draw posts.
	if (postRatio < _postSize) {

		// Limit cap inset.
		float insetLimit = min(_postSize, i_volume_size[a2]);
		if (mod(insetLimit, 2.0) == 0.0) {
			_capInset = min(_capInset, insetLimit / 2.0 - 1.0);
		}
		else {
			_capInset = min(_capInset, floor(insetLimit / 2.0));
		}

		// Limit cap height.
		float heightLimit = floor((i_volume_size[a3] - 2.0) / 2.0);
		if (mod(i_volume_size[a3] - 2.0, 2.0) == 0.0) {
			_capHeight = min(_capHeight, heightLimit - 1.0);
		}
		else {
			_capHeight = min(_capHeight, heightLimit);
		}

		// Determine which voxels to draw.
		if (floor(v[a3]) > _capHeight && floor(v[a3]) < i_volume_size[a3] - 1.0 - _capHeight) {
			if (postRatio > _capInset && postRatio < _postSize - _capInset && v[a2] >= _capInset && v[a2] < i_volume_size[a2] - _capInset) {
				return i_color_index;
			}
		}
		else {
			return i_color_index;
		}
	}

	// ===============================================
	// ===== CALCULATIONS FOR PICKETS ================
	// ===============================================

	// Draw pickets.
	if (postRatio >= _postSize) {
		float picketRatio = mod(mod(v[a1] - _postOffset, gridSize) - _postSize, _postSpacing + _picketSize);

		// Limit picket inset value so they won't disappear if inset value is too high.
		_picketInset = _picketInset * 2.0 < i_volume_size[a2] ? _picketInset : (i_volume_size[a2] - 2.0) / 2.0;

		if (picketRatio >= _postSpacing &&
			v[a2] > _picketInset && v[a2] < i_volume_size[a2] - _picketInset &&
			v[a3] - _picketOffset > _picketHeightLimit && v[a3] - _picketOffset < i_volume_size[a3] - _picketHeightLimit) {
				return _railColor;
		}
	}

	// ===============================================
	// ===== CALCULATIONS FOR RAILS ==================
	// ===============================================

	// Calculate rail section size.
	// Section size is measured from the center of model cage.
	if (_railCount > 0.0) {
		float railSectionSize = _railSize;
		float startPos = 0.0;
		float endPos = 0.0;

		if (_railCount > 1.0) {
			railSectionSize = _railCount * _railSize + (_railCount - 1.0) * _railSpacing;
		}

		// Calculate start and end offsets from the center of model cage for Z axis.
		startPos = ceil((i_volume_size[a3] - railSectionSize) / 2.0) + _railOffset;
		endPos = startPos + railSectionSize;

		// Limit rail inset value to size of posts (aka model cage).
		_railInset = _railInset * 2.0 < i_volume_size[a2] ? _railInset : (i_volume_size[a2] - 2.0) / 2.0;

		// Disaply rails taking into account the rail inset value.
		if ((v[a3] >= startPos) && (v[a3] <= endPos)) {
			if (mod(v[a3] - startPos, _railSize + _railSpacing) < _railSize &&
				v[a2] > _railInset &&
				v[a2] < i_volume_size[a2] - _railInset) {
				return _railColor;
			}
		}
	}

	return 0.0;
}

float map(vec3 v) {
	// Set orientation based on which 3D pane is selected for drawing.
	if (i_volume_size.x >= i_volume_size.y) {
		if (i_mirror.x == 1.0) {
			v.x = i_volume_size.x - v.x;
		}
	}
	else if (i_volume_size.x < i_volume_size.y) {
		if (i_mirror.y == 1.0) {
			v.y = i_volume_size.y - v.y;
		}
	}

	return createFence(v);
}
